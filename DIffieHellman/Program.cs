using System;
using System.Linq;
using System.Net.Security;
using System.Security.Cryptography;

namespace DiffieHellman
{
    class Program
    {
        static void Main(string[] args)
        {
            int a = 6, b = 15, p = 17, g = 5; // p and g are publicly available, a and b are private values
            var keyA = InputGenerator(g, a, p);
            var keyB = InputGenerator(g, b, p);
            
            Console.WriteLine($"Key generated by A is - {keyA} - while key generated by B is - {keyB} - ");

            var secretA = InputGenerator(keyA, b, p);
            var secretB = InputGenerator(keyB, a, p);

            Console.WriteLine($"Secret generated by A is - {secretA} - secret generated by B is - {secretB} -");

            Console.ReadKey();

        }

        static int InputGenerator(int pKeyBase, int pow, int p)
        {
            int remainder = 0;
            int multiplier = 1;

            for (int i = pow - 1; i >= 0; i--)
            {
                if (i == pow - 1)
                {
                    multiplier = multiplier * pKeyBase;
                }

                if (multiplier > p)
                {
                    remainder = multiplier % p;
                    multiplier = 1;
                    continue;
                }

                if (multiplier < p && i != pow - 1)
                {
                    multiplier = multiplier * pKeyBase;
                    if (multiplier > p)
                    {
                        remainder = multiplier % p;
                        multiplier = 1;
                    }
                }

                if (remainder != 0)
                {
                    multiplier = remainder * multiplier;
                    remainder = 1;
                }
            }

            return multiplier;
        }

        #region ModPow Not in Use
        static int ModPow(int pbase, int pow)
        {
            int i;
            int pwacc = 1;
            for (i = 0; i < pow; i++)
            {
                pwacc = pwacc * pbase;
            }

            return pwacc;
        }

        #endregion


    }
}
